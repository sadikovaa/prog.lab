#include <iostream>
#include "xml/pugixml.h"
#include <vector>
#include <algorithm>
#include <Windows.h>
#include <map>
#include <string>
#include <cmath>
using namespace std;
using namespace pugi;
const string TRAM = "Трамвай";
const string TROLL = "Троллейбус";
const string BUS = "Автобус";

struct stops{
    string name;
    float coordinate1=0;
    float coordinate2=0;

};

void processing(map <string, vector <stops>> &transport, string &routes, struct stops &stop){
    string new_route;
    for(auto i : routes){
        if (i == ','){
            transport[new_route].push_back(stop);
            new_route.clear();
        } else {
            new_route+=i;
        }
    }
    transport[new_route].push_back(stop);
}

string max_count_stops (map <string, vector <stops>> &transport){
    string max_route;
    int max_size = 0;
    for (const auto& i : transport) {
        if (i.second.size() > max_size){
            max_size=i.second.size();
            max_route = i.first;
        }
    }
    return max_route;
}
float length(struct stops &stop1, struct stops &stop2) {
    return pow(pow(stop2.coordinate1 - stop1.coordinate1, 2) + pow(stop2.coordinate2 - stop1.coordinate2,2), 0.5);
}

map <string, float> lenght_route(map <string, vector <stops>> &transport){
    map <string, float> len;
    for (auto& i : transport) {
        float l =0;
        for (int j=0; j < i.second.size()-1; j++){
            l +=length(i.second[j], i.second[j+1]);
        }
        len[i.first] = l;
    }
    return len;
}

string max_len_route(map <string, float> &transp_len){
    string max_route;
    int max_len = 0;
    for (const auto& i : transp_len) {
        if (i.second> max_len){
            max_len=i.second;
            max_route = i.first;
        }
    }
    return max_route;
}

void find_streets(map <string, vector <string>> &streets, string &location, string &name){
    string new_street;
    for(auto i : location){
        if (i == ','){
            streets[new_street].push_back(name);
            new_street.clear();
        } else {
            new_street+=i;
        }
    }
    streets[new_street].push_back(name);
}

string max_count_streets(map <string, vector <string>> &streets){
    string max_street;
    int max_count = 0;
    for (const auto& i : streets) {
        if (i.second.size()> max_count){
            max_count=i.second.size();
            max_street = i.first;
        }
    }
    return max_street;
}

int main() {
    SetConsoleOutputCP(CP_UTF8);
    xml_document doc;
    doc.load_file("data.xml");
    map <string, vector <stops>> tram;
    map <string, vector <stops>> troll;
    map <string, vector <stops>> bus;
    map <string, vector <string>> streets;
    xml_node dataset = doc.child("dataset");
    for (xml_node transport_station = dataset.first_child(); transport_station; transport_station=transport_station.next_sibling() ){
        struct stops stop;
        stop.name = transport_station.child_value("name_stopping");
        string location = transport_station.child_value("location");
        if (!location.empty())
            find_streets(streets, location, stop.name);
        string coordinates = transport_station.child_value("coordinates");
        string c;
        for(auto i : coordinates){
            if (i == ','){
                stop.coordinate1 = atof(c.c_str());
                c.clear();
            } else
                c+=i;
        }
        stop.coordinate2 = atof(c.c_str());
        string routes = transport_station.child_value("routes");
        if (transport_station.child_value("type_of_vehicle") == TRAM)
            processing(tram, routes, stop);
        else if (transport_station.child_value("type_of_vehicle") == TROLL)
            processing(troll, routes, stop);
        else if (transport_station.child_value("type_of_vehicle") == BUS)
            processing(bus, routes, stop);
    }

    map <string, float> tram_lenght = lenght_route(tram);
    map <string, float> troll_lenght = lenght_route(troll);
    map <string, float> bus_lenght = lenght_route(bus);


    cout << "***1***\n";
    cout <<"TRAM: "<< max_count_stops(tram) << "\n";
    cout <<"TROLL: "<< max_count_stops(troll) << "\n";
    cout <<"BUS: "<< max_count_stops(bus) << "\n";
    cout << "***2***\n";
    cout <<"TRAM: "<< max_len_route(tram_lenght) << "\n";
    cout <<"TROLL: "<< max_len_route(troll_lenght) << "\n";
    cout <<"BUS: "<< max_len_route(bus_lenght) << "\n";
    cout << "***3***\n";
    cout <<max_count_streets(streets) << "\n";

    return 0;
}
